[ ca ] # How the 'ca' command will act when utilized to sign certs
	default_ca		= ca_default # The name of the default CA section

[ ca_default ] # defining the default CA section
	dir				= /home/guteshel/.sec_proj/practice/devsecops/autosignssl/src/pkix/root		# Default root directory
	certs			= $dir/certsdb	# Default certificates directory
	new_certs_dir	= $certs		# Default new certificates directory
	database		= $dir/index.txt	# Database of certificates
	certificate		= $dir/cacert.pem	# The default CA's certificate
	private_key		= $dir/private/cakey.pem	# the default CA's private key
	serial			= $dir/serial		# A database of serials.
	crldir			= $dir/crl			# Default CRL directory 
	crlnumber		= $dir/crlnumber	# CRL serial
	crl				= $crldir/crl.pem	# CRL file.
	RANDFILE		= $dir/private/.rand	# File of random data, need to set up the script to fill it from the /dev/urandom
	name_opt		= ca_default # How the name is displayed to you for confirmation
	cert_opt		= ca_default # How the certificate is displayed to you for confirmation
	default_days	= 90
	default_crl_days= 30
	default_md		= sha256
	preserve		= no		# Do not allow people to determine the order of their DN.
	policy			= policy_match # Strict policy

[ policy_match ]
	countryName			= match
	stateOrProvinceName	= match
	localityName		= match	# Locality name (e.g., city)
	organizationName	= match	
	organizationalUnitName = optional
	commonName			= supplied
	emailAddress		= optional

[ policy_anything ]
	countryName				= optional
	stateOrProvinceName		= optional
	localityName			= optional
	organizationName		= optional
	organizationalUnitName	= optional
	commonName				= supplied
	emailAddress			= optional

[ req ]	# a section for the req command
	default_bits			= 3072
	default_keyfile			= $dir/privkey.pem
	distinguished_name		= req_distinguished_name # referencing a section
	attributes				= req_attributes  # referencing a section
	x509_extensions			= v3_ca # referencing a section
	req_extensions			= v3_req # referencing a section
	string_mask 			= utf8only

[ req_distinguished_name ]
	countryName				= Country Name (2 letter code)
	countryName_default		= DZ
	countryName_min			= 2
	countryName_max			= 2

	stateOrProvinceName		= State or Province Name (full name)
	stateOrProvinceName_default	= Algiers

	localityName			= Locality Name (eg, city)
	localityName_default	= Hussein Dey

	0.organizationName			= Organization Name (eg, company)
	0.organizationName_default	= ABCDEF Corporation	 

	organizationalUnitName	= Organizational Unit Name (eg, section)

	commonName		= Common Name (eg, YOUR name)
	commonName_max	= 64

	emailAddress    	= Email Address
	emailAddress_max	= 64

[ req_attributes ]
	challengePassword			= A challenge password
	challengePassword_min		= 8
	challengePassword_max		= 20
	
[ v3_req ]

	basicConstraints= CA:FALSE
	keyUsage		= digitalSignature, keyAgreement
	subjectAltName	= email:move

[ ecdsa_polsect ]
	policyIdentifier 	= 1.3.6.1.5.5.7.3.1	# for serverAuth
	userNotice.1 		= @notice

[ ecdsa_polsect ]
	policyIdentifier	= 1.3.6.1.5.5.7.3.1	# for serverAuth too... Couldn't find any better
	userNotice.1		= @notice

[notice]
	explicitText	= 'This CA policy covers the following requirements: Common Name is required, other fields are optional. All certificates must comply with the CA\'s operational standards and policies.'
	organization	= 'Alboutica'
	noticeNumbers	= 1	# I only have one security policy anyway.

[ ca_polsect ]
	policyIdentifier = 1.3.6.1.5.5.7.3.27	# for serverAuth
	userNotice.1 	= @notice

[ v3_ca ]
	subjectKeyIdentifier	= hash
	authorityKeyIdentifier	= keyid:always,issuer:always
	basicConstraints		= critical,cA:true
	subjectAltName			= email:move
	issuerAltName			= email:move
	crlDistributionPoints 	= URI:https://crl.example-root-ca.com/crl.pem
	keyUsage 				= cRLSign, keyCertSign, digitalSignature
	subjectAltName			= email:copy
	certificatePolicies 	= ia5org, @ca_polsect

[ v3_server_kex ] # profile
	basicConstraints		= cA:FALSE 

	authorityKeyIdentifier	= keyid,issuer # the hash of the key
	subjectKeyIdentifier	= hash			
	keyUsage				= keyAgreement, digitalSignature # used for key 
															 # establishment
	subjectAltName	= email:move # moves the email from the DN to the SAN
	issuerAltName	= issuer:move
	extendedKeyUsage= serverAuth # An other usage of the key is to 
		# authenticate the server to the client. I have commented it because 
		# diffie-helmann is not used to authenticate but to establish keys.
	
[ v3_server_sig ] # profile
	basicConstraints		= cA:FALSE
	authorityKeyIdentifier	= keyid,issuer
	subjectKeyIdentifier	= hash
	keyUsage				= digitalSignature, keyEncipherment
	subjectAltName			= email:move
	issuerAltName			= issuer:move
	extendedKeyUsage		= serverAuth